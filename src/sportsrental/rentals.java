/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sportsrental;

import java.util.List;
import java.util.Map;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
/**
 *
 * @author Alex & Anna
 */
public class rentals extends javax.swing.JFrame {
    //Making variables global so all button function have access to it
    private String customerIDText;
    private String stockIDText;
    private String startDateText;
    private String returnDateText;
    private double pricePerDay;
    private boolean available;
    private LocalDate userStartDate;
    private LocalDate userReturnDate;
    private sportsRentalDB rentalDB;

    /**
     * Creates new form rentals
     */
    public rentals() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCustomerID = new javax.swing.JLabel();
        txtCustomerID = new javax.swing.JTextField();
        lblStockID = new javax.swing.JLabel();
        txtStockID = new javax.swing.JTextField();
        lblStartDate = new javax.swing.JLabel();
        txtStartDate = new javax.swing.JFormattedTextField();
        lblReturnDate = new javax.swing.JLabel();
        txtReturnDate = new javax.swing.JFormattedTextField();
        lblMessage = new javax.swing.JLabel();
        btnCheckPriceAndAvailability = new javax.swing.JButton();
        lblSimpleMessageToUser = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatusLive = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        lblFullPriceDisplay = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnBook = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblCustomerID.setText("Customer ID:");

        txtCustomerID.setText("Eg. 1");
        txtCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerIDActionPerformed(evt);
            }
        });

        lblStockID.setText("Stock ID:");

        txtStockID.setText("Eg. 1");
        txtStockID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStockIDActionPerformed(evt);
            }
        });

        lblStartDate.setText("Start Date:");

        txtStartDate.setText("Eg. 04/04/2024");

        lblReturnDate.setText("Return Date:");

        txtReturnDate.setText("Eg. 04/05/2024");
        txtReturnDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReturnDateActionPerformed(evt);
            }
        });

        btnCheckPriceAndAvailability.setBackground(new java.awt.Color(0, 102, 204));
        btnCheckPriceAndAvailability.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckPriceAndAvailability.setText("Check Price and Availability");
        btnCheckPriceAndAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckPriceAndAvailabilityActionPerformed(evt);
            }
        });

        lblSimpleMessageToUser.setForeground(new java.awt.Color(255, 0, 0));
        lblSimpleMessageToUser.setText("You need to Check Price and Availability in order to book");

        lblStatus.setText("Status:");

        lblTotalPrice.setText("Total Price");

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnBook.setBackground(new java.awt.Color(0, 153, 0));
        btnBook.setForeground(new java.awt.Color(255, 255, 255));
        btnBook.setText("Book");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        btnReturn.setBackground(new java.awt.Color(153, 0, 153));
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblSimpleMessageToUser))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblStatus)
                            .addComponent(lblTotalPrice))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFullPriceDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStatusLive, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(btnBack)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReturn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnBook))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnCheckPriceAndAvailability)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblCustomerID)
                                        .addComponent(lblStartDate))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtCustomerID)
                                        .addComponent(txtStartDate))
                                    .addGap(35, 35, 35)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblReturnDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblStockID, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGap(25, 25, 25)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtReturnDate)
                                        .addComponent(txtStockID)))))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomerID)
                    .addComponent(lblStockID)
                    .addComponent(txtStockID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStartDate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblReturnDate, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCheckPriceAndAvailability)
                .addGap(12, 12, 12)
                .addComponent(lblSimpleMessageToUser)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatus)
                    .addComponent(lblStatusLive, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFullPriceDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalPrice))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnBook)
                    .addComponent(btnReturn)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public class Utils {
    //Checking if  user input start date is inbetween database startdate
    public static boolean isBetween(String dateToCheck, String startDate, String endDate) {
        //Incase user enter for example 1/1/2024
                        DateTimeFormatter formatter = new DateTimeFormatterBuilder()
                        .appendPattern("d/M/yyyy")
                         .toFormatter();
        LocalDate date = LocalDate.parse(dateToCheck, formatter);
        LocalDate start = LocalDate.parse(startDate, formatter);
        LocalDate end = LocalDate.parse(endDate, formatter);
        /* Checks the user date is greater than or equal to the start date AND less than or equal 
        to the end date. If both conditions are true, 
        Meaning the date is between the start and end dates. */
        return date.compareTo(start) >= 0 && date.compareTo(end) <= 0;
    }
}
    //Calculate the number of days between start and returnDate
    private long calculateNumberOfDays(LocalDate startDate, LocalDate returnDate) {
        //Calculate the difference in days between the two dates
        return ChronoUnit.DAYS.between(startDate, returnDate);
    }


    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
            this.dispose();
            login  lpage = new login();
            lpage.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCheckPriceAndAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckPriceAndAvailabilityActionPerformed
       //Getting values from text field
        customerIDText = txtCustomerID.getText().trim();
        stockIDText = txtStockID.getText().trim();
        startDateText = txtStartDate.getText().trim();
        returnDateText = txtReturnDate.getText().trim();
        
        //Clear everytime button is pressed
        lblStatusLive.setText("");
        lblMessage.setText("");
        lblFullPriceDisplay.setText("");
        
        //If any is empty
        if (customerIDText.isEmpty() || stockIDText.isEmpty() || startDateText.isEmpty() || returnDateText.isEmpty()) {
            lblMessage.setText("Please fill in all fields.");
            return;
        }
        try {
           //Convert customerIDText and stockIDText to integers
            int customerID = Integer.parseInt(customerIDText);
            int stockID = Integer.parseInt(stockIDText);
            
            rentalDB = new sportsRentalDB();
            String firstName = rentalDB.getCustomerFirstName(customerID);

            //Setting the date format inacse user enters for example 1/1/2024
            DateTimeFormatter formatter = new DateTimeFormatterBuilder()
                    .appendPattern("d/M/yyyy")
                     .toFormatter();
            //Convert start date and return date to new format using the new format
             userStartDate = LocalDate.parse(startDateText, formatter);
             userReturnDate = LocalDate.parse(returnDateText, formatter);
             
           //Get list of dates the item is booked
            List<Map<String, String>> availabilityInfoList = rentalDB.checkAvailability(stockID); 
           
            //If list is empty item is available
            if (availabilityInfoList.isEmpty()) {
                //If customerID isn't a valid one
               if (firstName == null) {
                lblMessage.setText("Invalid customer.");
                //Put the availability to false which won't calculate total et c..
                available = false;
            } else {
                lblMessage.setText("Hi " + firstName);
                lblStatusLive.setText("Available");
                available = true;
             }

            }
            else {
                        //Iteterate to hasmap using key and get the dates and to check using the isBetwwen method on top
                        for (Map<String, String> availabilityInfo : availabilityInfoList) {
                            String rentalDate = availabilityInfo.get("Rental Date");
                            String returnDate = availabilityInfo.get("Return Date");
                            //System.out.println("Rental Date: " + rentalDate);
                           // System.out.println("Return Date: " + returnDate);
                            // Check if the start date falls between rental date and return date
                            if (Utils.isBetween(startDateText, rentalDate, returnDate)) {
                                //If customerID isn't a valid one
                                 if (firstName == null) {
                                        lblMessage.setText("Invalid customer.");
                                        available = false;
                                         lblStatusLive.setText("Unavailable");
                                         break;
                                 }
                                 else{
                                     lblMessage.setText("Hi " + firstName);
                                     available = false;
                                     lblStatusLive.setText("Unavailable");
                                     break;
                                 }
                            }
                            //If it's not, it's available 
                             else{
                                        available = true;
                                    }
                            }
                            if (firstName == null) {
                                lblMessage.setText("Invalid customer.");
                                available = false;
                            }
            }
                            //If boolean available is true continue
                             if (available){
                                    lblMessage.setText("Hi " + firstName);
                                    lblStatusLive.setText("Available");
                                    System.out.println("were in last if");
                                    //Get price per day in stock
                                    pricePerDay = rentalDB.getRentPricePerDay(stockID);
                                    //get number of days between dates
                                    long numberOfDays = calculateNumberOfDays(userStartDate, userReturnDate);
                                    //calculate price but if num day is 0 make it 1 to charge the day
                                    if(numberOfDays ==0)
                                    {
                                        numberOfDays = 1;
                                    }
                                    //Calculation
                                    double fullPrice = numberOfDays * pricePerDay;
                                    System.out.println(fullPrice);
                                    //Display price
                                    lblFullPriceDisplay.setText("€ "+ Double.toString(fullPrice));
                            }
                    
        } catch (NumberFormatException e) {
            //Handle NumberFormatException if parsing fails
            lblMessage.setText("Please enter valid numbers for Customer ID and Stock ID.");
        }
         catch (DateTimeParseException e) {
        //Handle DateTimeParseException if date parsing fails
        lblMessage.setText("Please enter valid dates in the format dd/MM/yyyy.");
        } catch (Exception e) {
            //Handle any other exceptions
            lblMessage.setText("An error occurred. Please try again later.");
            e.printStackTrace(); // Print the stack trace for debugging
        }
            
    }//GEN-LAST:event_btnCheckPriceAndAvailabilityActionPerformed

    private void txtReturnDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReturnDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReturnDateActionPerformed

    private void txtStockIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStockIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStockIDActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        lblMessage.setText("");
        if (available) {
            //If available, add the rental
            System.out.println("w're in book button");
            rentalDB.addRental(Integer.parseInt(customerIDText), Integer.parseInt(stockIDText), userStartDate, userReturnDate, pricePerDay);
            lblMessage.setText("Booking successful.");
        } else {
            lblMessage.setText("Booking is unavailable.");
            System.out.println(available);
        }
    }//GEN-LAST:event_btnBookActionPerformed

    private void txtCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerIDActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        this.dispose();
        returnRental  rRental = new returnRental();
        rRental.setVisible(true);
    }//GEN-LAST:event_btnReturnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rentals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new rentals().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnCheckPriceAndAvailability;
    private javax.swing.JButton btnReturn;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblFullPriceDisplay;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblReturnDate;
    private javax.swing.JLabel lblSimpleMessageToUser;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatusLive;
    private javax.swing.JLabel lblStockID;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JFormattedTextField txtReturnDate;
    private javax.swing.JFormattedTextField txtStartDate;
    private javax.swing.JTextField txtStockID;
    // End of variables declaration//GEN-END:variables
}
